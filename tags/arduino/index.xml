<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Arduino on end2end zone</title><link>http://localhost:1313/tags/arduino/</link><description>Recent content in Arduino on end2end zone</description><generator>Hugo</generator><language>en</language><lastBuildDate>Thu, 22 Dec 2016 18:03:50 +0000</lastBuildDate><atom:link href="http://localhost:1313/tags/arduino/index.xml" rel="self" type="application/rss+xml"/><item><title>How to convert arduino code to actual RTTTL melodies using libRtttl and AnyRtttl</title><link>http://localhost:1313/how-to-convert-arduino-code-to-actual-rtttl-melodies-using-librtttl-and-anyrtttl/</link><pubDate>Thu, 22 Dec 2016 18:03:50 +0000</pubDate><guid>http://localhost:1313/how-to-convert-arduino-code-to-actual-rtttl-melodies-using-librtttl-and-anyrtttl/</guid><description>&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>The following article is written in order to demonstrate how my arduino libraries &lt;a href="http://localhost:1313/librtttl-a-c-library-with-ui-for-compressingoptimizing-the-rtttl-audio-format/">libRtttl&lt;/a> &amp;amp; &lt;a href="http://localhost:1313/anyrtttl-a-feature-rich-arduino-library-for-playing-rtttl-melodies/">AnyRtttl&lt;/a> can be used to convert arduino code (&lt;code>tone()&lt;/code> and &lt;code>delay()&lt;/code> functions calls) into actual RTTTL melodies.&lt;/p>
&lt;p>This article shows how to convert &amp;lsquo;&lt;em>Game of Throne theme&lt;/em>&amp;rsquo;, &amp;lsquo;&lt;em>Star Wars - The imperial March&lt;/em>&amp;rsquo; and most &lt;em>Super Mario Bros. sound themes&lt;/em> (Main theme, 1-up life sound, Flagpole fanfare, Death and Game Over sounds) into actual playable RTTTL melodies.&lt;/p></description></item><item><title>DIY lost plane alarm finder and 10 watts LED visual aids for easy orientation</title><link>http://localhost:1313/diy-lost-plane-alarm-finder-and-10-watts-led-visual-aids-for-easy-orientation/</link><pubDate>Thu, 27 Oct 2016 16:48:23 +0000</pubDate><guid>http://localhost:1313/diy-lost-plane-alarm-finder-and-10-watts-led-visual-aids-for-easy-orientation/</guid><description>&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>The reason I started this project is because I recently had a bad experience flying a quadcopter too far from me until I was not able to distinguish if the quad was facing me or not. It does not require much distance before a quadcopter looks like a tiny black dot in the sky. Basically, I lost orientation of the quad and I had to land way too far from my takeoff location.&lt;/p></description></item><item><title>SoftTimers – A collection of software timers to easily compute elapsed time since an event occurred</title><link>http://localhost:1313/softtimers-a-collection-of-software-timers-to-easily-compute-elapsed-time-since-an-event-occured/</link><pubDate>Fri, 10 Jun 2016 20:14:19 +0000</pubDate><guid>http://localhost:1313/softtimers-a-collection-of-software-timers-to-easily-compute-elapsed-time-since-an-event-occured/</guid><description>&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>The following article is about my simplest library that I wrote for the arduino: &lt;em>SoftTimers&lt;/em>. The &lt;em>SoftTimers&lt;/em> arduino library allows one to properly time multiple events and know when each &amp;ldquo;timer&amp;rdquo; expires meaning that an action is required.&lt;/p>
&lt;p>Skip to the &lt;a href="http://localhost:1313/softtimers-a-collection-of-software-timers-to-easily-compute-elapsed-time-since-an-event-occured/#Download">download section&lt;/a> for quick download.&lt;/p>
&lt;p>When I first learned programming the arduino, I learned the &amp;ldquo;&lt;em>hello world&lt;/em>&amp;rdquo; of the arduino: turning a LED on and off. As expected, I used &lt;code>delay()&lt;/code> to define how long the LED should be on and off.&lt;/p></description></item><item><title>libRtttl – A c++ library (with UI) for compressing/optimizing the RTTTL audio format</title><link>http://localhost:1313/librtttl-a-c-library-with-ui-for-compressingoptimizing-the-rtttl-audio-format/</link><pubDate>Sat, 28 May 2016 15:18:35 +0000</pubDate><guid>http://localhost:1313/librtttl-a-c-library-with-ui-for-compressingoptimizing-the-rtttl-audio-format/</guid><description>&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>The following article is about another library that I have written: libRtttl is a c++ library for manipulating the RTTTL audio format.&lt;/p>
&lt;p>Skip to the &lt;a href="http://localhost:1313/librtttl-a-c-library-with-ui-for-compressingoptimizing-the-rtttl-audio-format/#Download">download section&lt;/a> for quick download.&lt;/p>
&lt;p>See this post for a &lt;a href="http://localhost:1313/nonblockingrtttl-a-non-blocking-arduino-library-for-playing-rtttl-melodies/#Quick_recall_of_the_RTTTL_format">quick recall of the RTTTL format&lt;/a>.&lt;/p>
&lt;p class="postedit">
 Edit: for a better understanding and examples of what libRTTTL can do, please see this post:
&lt;a href="http://localhost:1313/how-to-convert-arduino-code-to-actual-rtttl-melodies-using-librtttl-and-anyrtttl/">How to convert arduino code to actual RTTTL melodies using libRtttl and AnyRtttl&lt;/a>.
&lt;/p>
&lt;h1 id="purpose">Purpose&lt;/h1>
&lt;p>RTTTL songs available on the internet are not optimized for the smallest size. Still they are readable by a human but they are far from optimized for the arduino embedded device. Most RTTTL song can be optimized (without quality loss) and have their size reduced by ~20%. Conversion to binary allows even better compression but it wont be human readable anymore.&lt;/p></description></item><item><title>AnyRtttl – A feature rich arduino library for playing RTTTL melodies</title><link>http://localhost:1313/anyrtttl-a-feature-rich-arduino-library-for-playing-rtttl-melodies/</link><pubDate>Sat, 21 May 2016 23:20:34 +0000</pubDate><guid>http://localhost:1313/anyrtttl-a-feature-rich-arduino-library-for-playing-rtttl-melodies/</guid><description>&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>The following article is about yet another Arduino library that I have written. AnyRtttl is a feature rich arduino library for playing RTTTL melodies. The library offers much more interesting features than relying on the widely available &lt;code>void play_rtttl(char *p)&lt;/code> function. The AnyRtttl is a feature rich library which supports all best RTTTL features.&lt;/p>
&lt;p>Skip to the &lt;a href="http://localhost:1313/anyrtttl-a-feature-rich-arduino-library-for-playing-rtttl-melodies/#Download">download section&lt;/a> for quick download.&lt;/p>
&lt;h1 id="purpose">Purpose&lt;/h1>
&lt;p>See this post for a &lt;a href="http://localhost:1313/nonblockingrtttl-a-non-blocking-arduino-library-for-playing-rtttl-melodies/#Quick_recall_of_the_RTTTL_format">quick recall of the RTTTL format&lt;/a>.&lt;/p></description></item><item><title>win32Arduino: a win32 library that implements most arduino functions</title><link>http://localhost:1313/win32arduino-a-win32-library-that-implements-most-arduino-functions/</link><pubDate>Mon, 16 May 2016 17:15:58 +0000</pubDate><guid>http://localhost:1313/win32arduino-a-win32-library-that-implements-most-arduino-functions/</guid><description>&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>Please note that win32Arduino source code is now moved to GitHub. Source code can be downloaded from &lt;a href="http://github.com/end2endzone/win32Arduino">the project&amp;rsquo;s GitHub page&lt;/a>.&lt;/p>
&lt;p>
&lt;img src="https://img.shields.io/badge/License-MIT-yellow.svg" alt="">
 
&lt;img src="https://img.shields.io/github/release/end2endzone/win32Arduino.svg" alt="">
 
&lt;img src="https://ci.appveyor.com/api/projects/status/4jhi6oqgaji5e7pl/branch/master?svg=true" alt="">
 
&lt;img src="https://img.shields.io/appveyor/tests/end2endzone/win32Arduino/master.svg" alt="">
 
&lt;img src="https://img.shields.io/github/downloads/end2endzone/win32Arduino/total.svg" alt="">
&lt;/p>
&lt;p>After implementing many arduino library, I realized that unit testing a library is harder than I though. Most of the time, the library does not even require advanced arduino functionalities and could be tested outside of the arduino platform.&lt;/p>
&lt;p>The win32Arduino is a solution to this issue.&lt;/p>
&lt;p>Skip to the &lt;a href="http://localhost:1313/win32arduino-a-win32-library-that-implements-most-arduino-functions/#Download">download section&lt;/a> for quick download.&lt;/p></description></item><item><title>How to multiplex RC Transmitter switches into a single channel</title><link>http://localhost:1313/how-to-multiplex-rc-transmitter-switches-into-a-single-channel/</link><pubDate>Wed, 30 Mar 2016 17:15:24 +0000</pubDate><guid>http://localhost:1313/how-to-multiplex-rc-transmitter-switches-into-a-single-channel/</guid><description>&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>In a personal project, I wanted to add 2 new devices to an existing quadcopter. The quadcopter was equipped with a 6-channel receiver meaning I only had 1 spare channel to control the 2 devices:&lt;/p>
&lt;div class="rc-channels">
 &lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>&lt;/th>
 &lt;th>&lt;/th>
 &lt;th>&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>CH 1&lt;/td>
 &lt;td>:&lt;/td>
 &lt;td>Throttle&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>CH 2&lt;/td>
 &lt;td>:&lt;/td>
 &lt;td>Rudder&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>CH 3&lt;/td>
 &lt;td>:&lt;/td>
 &lt;td>Ailerons&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>CH 4&lt;/td>
 &lt;td>:&lt;/td>
 &lt;td>Elevator&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>CH 5&lt;/td>
 &lt;td>:&lt;/td>
 &lt;td>Flight mode&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>CH 6&lt;/td>
 &lt;td>:&lt;/td>
 &lt;td>???&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>

&lt;/div>
&lt;p>The following article explains how I manage to solve the issue: &lt;em>How can I control more than one device using a single channel&lt;/em>.&lt;/p></description></item><item><title>RcReceiverSignal: an arduino library for retrieving the RC Transmitter value from an RC Receiver pulse</title><link>http://localhost:1313/rcreceiversignal-an-arduino-library-for-retreiving-the-rc-transmitter-value-from-an-rc-receiver-pulse/</link><pubDate>Wed, 30 Mar 2016 17:05:59 +0000</pubDate><guid>http://localhost:1313/rcreceiversignal-an-arduino-library-for-retreiving-the-rc-transmitter-value-from-an-rc-receiver-pulse/</guid><description>&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>The following arduino library was written to use the findings found during the &lt;em>&lt;strong>&lt;a href="http://localhost:1313/mapping-rc-transmitter-pwm-signal-to-actual-transmitter-values/">Mapping RC Transmitter PWM signal to actual transmitter values&lt;/a>&lt;/strong>&lt;/em> article. All results were wrapped into a library for ease of use.&lt;/p>
&lt;p>The RcReceiverSignal is an arduino library that allows one to read a signal sent from a Remote Controlled (RC) receiver.&lt;/p>
&lt;p>Skip to the &lt;a href="http://localhost:1313/rcreceiversignal-an-arduino-library-for-retreiving-the-rc-transmitter-value-from-an-rc-receiver-pulse/#Download">download section&lt;/a> for quick download.&lt;/p>
&lt;h1 id="purpose">Purpose&lt;/h1>
&lt;p>The RcReceiverSignal library allows one to easily configure an input pin to read a PWM signal sent from a RC receiver by attaching a RcReceiverSignal instance to a pin connected the receiver and automatically monitor each pulse sent by the receiver.&lt;/p></description></item><item><title>Mapping RC Transmitter PWM signal to actual transmitter values</title><link>http://localhost:1313/mapping-rc-transmitter-pwm-signal-to-actual-transmitter-values/</link><pubDate>Sat, 26 Mar 2016 20:47:29 +0000</pubDate><guid>http://localhost:1313/mapping-rc-transmitter-pwm-signal-to-actual-transmitter-values/</guid><description>&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>If you ever need to use an RC Transmitter &amp;amp; receiver for a personal project, an easy way to retrieve the signal is to connect the receiver to a micro-controller.&lt;/p>
&lt;p>However, decoding the signal to get actual transmitter values is not as easy as it sounds. You need to know the correct encoding and searching on the internet about the subject gives erratic results.&lt;/p>
&lt;p>Here is the full article that explains how to correctly map an RC Transmitter PWM signal to actual transmitter values.&lt;/p></description></item><item><title>BitReader – An arduino library for reading &amp; writing data as chunks of bits</title><link>http://localhost:1313/bitreader-an-arduino-library-for-reading-writing-data-as-chunks-of-bits/</link><pubDate>Sat, 26 Mar 2016 00:23:05 +0000</pubDate><guid>http://localhost:1313/bitreader-an-arduino-library-for-reading-writing-data-as-chunks-of-bits/</guid><description>&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>Here is another arduino library that I have written.&lt;/p>
&lt;p>As a desktop developer, I am not used to have memory (or even CPU) requirements as most developers will not look at memory consumption as an arduino developer would. Memory &amp;amp; CPU is cheap. If your application is struggling to run on today&amp;rsquo;s computer, it will run smoothly in 1-2 years.&lt;/p>
&lt;p>As most arduino developers have faced, the amount of memory available on embedded devices is pretty limited. Having a way to save bits or our precious memory is interesting.&lt;/p></description></item><item><title>NonBlockingRTTTL – A non-blocking arduino library for playing RTTTL melodies</title><link>http://localhost:1313/nonblockingrtttl-a-non-blocking-arduino-library-for-playing-rtttl-melodies/</link><pubDate>Sun, 20 Mar 2016 15:16:54 +0000</pubDate><guid>http://localhost:1313/nonblockingrtttl-a-non-blocking-arduino-library-for-playing-rtttl-melodies/</guid><description>&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>The following article is about my first Arduino library that I have written. NonBlockingRTTTL is a non-blocking arduino library for playing RTTTL data.&lt;/p>
&lt;p class="postedit">
 &lt;strong>EDIT&lt;/strong>: The NonBlockingRtttl arduino library is now moved to GitHub. Source code can be downloaded from the project&amp;rsquo;s &lt;a href="http://github.com/end2endzone/NonBlockingRTTTL">GitHub page&lt;/a>.
&lt;/p>
&lt;p class="postedit">
 EDIT: NonBlockingRTTTL library is now available on the &lt;a href="http://www.arduino.cc/en/guide/libraries#toc3">Arduino Library Manager&lt;/a>.
&lt;/p>
&lt;p>Skip to the &lt;a href="http://localhost:1313/nonblockingrtttl-a-non-blocking-arduino-library-for-playing-rtttl-melodies/#Download">download section&lt;/a> for quick download.&lt;/p>
&lt;h1 id="purpose">Purpose&lt;/h1>
&lt;p>Most code that can be found on the internet that allows you to &amp;ldquo;play&amp;rdquo; an &lt;a href="http://localhost:1313/nonblockingrtttl-a-non-blocking-arduino-library-for-playing-rtttl-melodies/#Quick_recall_of_the_RTTTL_format">RTTTL&lt;/a> string is build the same way: sequential calls to the tone() function followed by a delay() function. This type of implementation might be good for robots but not for realtime application or projects that needs to monitor pins while the song is playing.&lt;/p></description></item></channel></rss>