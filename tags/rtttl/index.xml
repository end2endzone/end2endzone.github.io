<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rtttl on end2end zone</title><link>https://end2endzone.github.io/tags/rtttl/</link><description>Recent content in Rtttl on end2end zone</description><generator>Hugo</generator><language>en</language><lastBuildDate>Thu, 22 Dec 2016 18:03:50 +0000</lastBuildDate><atom:link href="https://end2endzone.github.io/tags/rtttl/index.xml" rel="self" type="application/rss+xml"/><item><title>How to convert arduino code to actual RTTTL melodies using libRtttl and AnyRtttl</title><link>https://end2endzone.github.io/how-to-convert-arduino-code-to-actual-rtttl-melodies-using-librtttl-and-anyrtttl/</link><pubDate>Thu, 22 Dec 2016 18:03:50 +0000</pubDate><guid>https://end2endzone.github.io/how-to-convert-arduino-code-to-actual-rtttl-melodies-using-librtttl-and-anyrtttl/</guid><description>&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>The following article is written in order to demonstrate how my arduino libraries &lt;a href="https://end2endzone.github.io/librtttl-a-c-library-with-ui-for-compressingoptimizing-the-rtttl-audio-format/">libRtttl&lt;/a> &amp;amp; &lt;a href="https://end2endzone.github.io/anyrtttl-a-feature-rich-arduino-library-for-playing-rtttl-melodies/">AnyRtttl&lt;/a> can be used to convert arduino code (&lt;code>tone()&lt;/code> and &lt;code>delay()&lt;/code> functions calls) into actual RTTTL melodies.&lt;/p>
&lt;p>This article shows how to convert &amp;lsquo;&lt;em>Game of Throne theme&lt;/em>&amp;rsquo;, &amp;lsquo;&lt;em>Star Wars - The imperial March&lt;/em>&amp;rsquo; and most &lt;em>Super Mario Bros. sound themes&lt;/em> (Main theme, 1-up life sound, Flagpole fanfare, Death and Game Over sounds) into actual playable RTTTL melodies.&lt;/p></description></item><item><title>libRtttl – A c++ library (with UI) for compressing/optimizing the RTTTL audio format</title><link>https://end2endzone.github.io/librtttl-a-c-library-with-ui-for-compressingoptimizing-the-rtttl-audio-format/</link><pubDate>Sat, 28 May 2016 15:18:35 +0000</pubDate><guid>https://end2endzone.github.io/librtttl-a-c-library-with-ui-for-compressingoptimizing-the-rtttl-audio-format/</guid><description>&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>The following article is about another library that I have written: libRtttl is a c++ library for manipulating the RTTTL audio format.&lt;/p>
&lt;p>Skip to the &lt;a href="https://end2endzone.github.io/librtttl-a-c-library-with-ui-for-compressingoptimizing-the-rtttl-audio-format/#Download">download section&lt;/a> for quick download.&lt;/p>
&lt;p>See this post for a &lt;a href="https://end2endzone.github.io/nonblockingrtttl-a-non-blocking-arduino-library-for-playing-rtttl-melodies/#Quick_recall_of_the_RTTTL_format">quick recall of the RTTTL format&lt;/a>.&lt;/p>
&lt;p class="postedit">
 Edit: for a better understanding and examples of what libRTTTL can do, please see this post:
&lt;a href="https://end2endzone.github.io/how-to-convert-arduino-code-to-actual-rtttl-melodies-using-librtttl-and-anyrtttl/">How to convert arduino code to actual RTTTL melodies using libRtttl and AnyRtttl&lt;/a>.
&lt;/p>
&lt;h1 id="purpose">Purpose&lt;/h1>
&lt;p>RTTTL songs available on the internet are not optimized for the smallest size. Still they are readable by a human but they are far from optimized for the arduino embedded device. Most RTTTL song can be optimized (without quality loss) and have their size reduced by ~20%. Conversion to binary allows even better compression but it wont be human readable anymore.&lt;/p></description></item><item><title>AnyRtttl – A feature rich arduino library for playing RTTTL melodies</title><link>https://end2endzone.github.io/anyrtttl-a-feature-rich-arduino-library-for-playing-rtttl-melodies/</link><pubDate>Sat, 21 May 2016 23:20:34 +0000</pubDate><guid>https://end2endzone.github.io/anyrtttl-a-feature-rich-arduino-library-for-playing-rtttl-melodies/</guid><description>&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>The following article is about yet another Arduino library that I have written. AnyRtttl is a feature rich arduino library for playing RTTTL melodies. The library offers much more interesting features than relying on the widely available &lt;code>void play_rtttl(char *p)&lt;/code> function. The AnyRtttl is a feature rich library which supports all best RTTTL features.&lt;/p>
&lt;p>Skip to the &lt;a href="https://end2endzone.github.io/anyrtttl-a-feature-rich-arduino-library-for-playing-rtttl-melodies/#Download">download section&lt;/a> for quick download.&lt;/p>
&lt;h1 id="purpose">Purpose&lt;/h1>
&lt;p>See this post for a &lt;a href="https://end2endzone.github.io/nonblockingrtttl-a-non-blocking-arduino-library-for-playing-rtttl-melodies/#Quick_recall_of_the_RTTTL_format">quick recall of the RTTTL format&lt;/a>.&lt;/p></description></item><item><title>NonBlockingRTTTL – A non-blocking arduino library for playing RTTTL melodies</title><link>https://end2endzone.github.io/nonblockingrtttl-a-non-blocking-arduino-library-for-playing-rtttl-melodies/</link><pubDate>Sun, 20 Mar 2016 15:16:54 +0000</pubDate><guid>https://end2endzone.github.io/nonblockingrtttl-a-non-blocking-arduino-library-for-playing-rtttl-melodies/</guid><description>&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>The following article is about my first Arduino library that I have written. NonBlockingRTTTL is a non-blocking arduino library for playing RTTTL data.&lt;/p>
&lt;p class="postedit">
 &lt;strong>EDIT&lt;/strong>: The NonBlockingRtttl arduino library is now moved to GitHub. Source code can be downloaded from the project&amp;rsquo;s &lt;a href="http://github.com/end2endzone/NonBlockingRTTTL">GitHub page&lt;/a>.
&lt;/p>
&lt;p class="postedit">
 EDIT: NonBlockingRTTTL library is now available on the &lt;a href="http://www.arduino.cc/en/guide/libraries#toc3">Arduino Library Manager&lt;/a>.
&lt;/p>
&lt;p>Skip to the &lt;a href="https://end2endzone.github.io/nonblockingrtttl-a-non-blocking-arduino-library-for-playing-rtttl-melodies/#Download">download section&lt;/a> for quick download.&lt;/p>
&lt;h1 id="purpose">Purpose&lt;/h1>
&lt;p>Most code that can be found on the internet that allows you to &amp;ldquo;play&amp;rdquo; an &lt;a href="https://end2endzone.github.io/nonblockingrtttl-a-non-blocking-arduino-library-for-playing-rtttl-melodies/#Quick_recall_of_the_RTTTL_format">RTTTL&lt;/a> string is build the same way: sequential calls to the tone() function followed by a delay() function. This type of implementation might be good for robots but not for realtime application or projects that needs to monitor pins while the song is playing.&lt;/p></description></item></channel></rss>